generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STUDENT
}

enum DiscussionType {
  COMMENT
  QUESTION
}

model User {
  id       String   @id @default(cuid())
  name     String
  email    String   @unique
  password String
  role     UserRole

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  createdCourses Course[]             @relation("CourseCreator")
  subscriptions CourseSubscription[]
  discussions     LessonDiscussion[]      @relation("LessonDiscussionAuthor")
  discussionReplies LessonDiscussionReply[] @relation("LessonDiscussionReplyAuthor")
  notes            StudentNote[]
}

model Course {
  id           String    @id @default(cuid())
  title        String
  description  String
  thumbnailUrl String?
  price        Float?
  level        String?
  tags         String[]
  createdBy    String
  creator      User      @relation("CourseCreator", fields: [createdBy], references: [id])
  modules      Module[]
  quizzes      Quiz[]
  subscriptions CourseSubscription[]
  discussions  LessonDiscussion[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Module {
  id          String   @id @default(cuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  title       String
  description String?
  order       Int
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lesson {
  id          String   @id @default(cuid())
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id])
  title       String
  videoUrl    String
  content     String?
  materialUrl String?
  note        String?
  order       Int
  duration    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  discussions LessonDiscussion[]
  studentNotes StudentNote[]
}

model CourseSubscription {
  id        String   @id @default(cuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  studentId String
  student   User     @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())

  @@unique([courseId, studentId])
}

model Quiz {
  id          String   @id @default(cuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  title       String
  description String?
  questions   Json
  createdAt   DateTime @default(now())
}

model LessonDiscussion {
  id        String         @id @default(cuid())
  lessonId  String
  lesson    Lesson         @relation(fields: [lessonId], references: [id])
  courseId  String
  course    Course         @relation(fields: [courseId], references: [id])
  authorId  String
  author    User           @relation("LessonDiscussionAuthor", fields: [authorId], references: [id])
  type      DiscussionType
  content   String
  replies   LessonDiscussionReply[]
  createdAt DateTime       @default(now())
}

model LessonDiscussionReply {
  id           String    @id @default(cuid())
  discussionId String
  discussion   LessonDiscussion @relation(fields: [discussionId], references: [id])
  authorId     String
  author       User      @relation("LessonDiscussionReplyAuthor", fields: [authorId], references: [id])
  content      String
  createdAt    DateTime  @default(now())
}

model StudentNote {
  id        String   @id @default(cuid())
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  studentId String
  student   User     @relation(fields: [studentId], references: [id])
  title     String?
  content   String
  timestamp Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
